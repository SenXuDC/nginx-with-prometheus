lua_shared_dict prometheus_metrics 10M;
lua_package_path "/prometheus.lua";
init_by_lua '
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
                "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
                "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge(
                "nginx_http_connections", "Number of HTTP connections", {"state"})
        metric_requests_uri = prometheus:counter(
                "nginx_http_requests_uri_total", "Number of HTTP requests_uri", {"host","uri", "status"})
        ';
log_by_lua '
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
        metric_requests_uri:inc(1, {ngx.var.server_name,ngx.var.request_uri, ngx.var.status})
';


server {
        listen 9145;
        server_name xxx.your.domain.com;  

        location /metrics {
                content_by_lua '
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
                ';
        }
}
